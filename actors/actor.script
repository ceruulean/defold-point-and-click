go.property("speed", 200)

local Globals = require "main.globals"
local camera = require "orthographic.camera"

-- https://paulwatt526.github.io/wattageTileEngineDocs/luaOopPrimer.html

local function clamp(mn, n, mx) return math.max(mn, math.min(mx, n)) end

local function quadratic_bezier(t, p0, p1, p2)
	local l1 = vmath.lerp(t, p0, p1)
	local l2 = vmath.lerp(t, p1, p2)
	return vmath.lerp(t, l1, l2)
end

-- mutates the `position` vector to stay within map coordinates
local function clamp_to_map(position)
	position.x = clamp(0, position.x, Globals.map_width)
	position.y = clamp(0, position.y, Globals.map_height)
end


-- Takes a height (y) and adjusts the z value and scale factor
local function scale_depth_along_height(self, y)
	MIN_SCALE = 0.1
	MAX_SCALE = 2.0

	local ptg = clamp(0.1, (1 - y / Globals.map_height), 1,0)
	local scale_curved = quadratic_bezier(ptg, vmath.vector3(0), vmath.vector3(0.12, 1, 0), vmath.vector3(1, 1, 0))
	self.z = 100 * ptg
	if scale_curved.y > 99.9 then 
		self.depth_scale = 1.0
	else
		self.depth_scale = clamp(MIN_SCALE, scale_curved.y, MAX_SCALE)
	end
end

local function move(self, from, velocity)
	if self.wants_to_move then
		-- check map bounds and block movement if going beyond
		local going_to = from + vmath.normalize(velocity)
		if going_to.x > Globals.map_width or going_to.x < 0 then
			velocity.x = 0
		end
		if going_to.y > Globals.map_height or going_to.y < 0 then
			velocity.y = 0
		end
		self.velocity = velocity
	else
		self.velocity = vmath.vector3(0)
	end
end

function init(self)
	self.inventory = {}
	self.input = vmath.vector3(0)
	self.correction = vmath.vector3(0)
	self.wants_to_move = false
	self.velocity = vmath.vector3(0)
	self.depth_scale = vmath.vector3(0)
	self.z = 1
	self.busy = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	local position = go.get_position()
	local new_pos = position

	-- self.actor.velocity = vmath.normalize(self.input) * self.speed
	local v = vmath.normalize(self.input) * self.speed
	move(self, position, v)

	new_pos =  position + self.velocity * dt

	scale_depth_along_height(self, new_pos.y) 
	new_pos.z = self.z
	
	clamp_to_map(new_pos)
	go.set_position(new_pos)
	go.set_scale( self.depth_scale )
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		local comp = (message.distance) * message.normal -- <2>
		go.set_position(go.get_position() + comp)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("do_hit") or action_id == hash("touch_hit") and action.pressed then
		print('hit')
	end

	if action.pressed then
		if action_id == hash("move_up") then
			self.input.y = self.input.y + 1
		elseif action_id == hash("move_down") then
			self.input.y = self.input.y - 1
		elseif action_id == hash("move_left") then
			self.input.x = self.input.x - 1
		elseif action_id == hash("move_right") then
			self.input.x = self.input.x + 1
		end

	elseif action.released then
		if action_id == hash("move_up") then
			self.input.y = self.input.y - 1
		elseif action_id == hash("move_down") then
			self.input.y = self.input.y + 1
		elseif action_id == hash("move_left") then
			self.input.x = self.input.x + 1
		elseif action_id == hash("move_right") then
			self.input.x = self.input.x - 1
		end
	end

	self.wants_to_move = vmath.length(self.input) > 0
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
